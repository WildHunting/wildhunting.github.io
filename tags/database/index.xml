<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>database on Wild Hunt</title>
    <link>/tags/database/</link>
    <description>Recent content in database on Wild Hunt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 01 Jun 2023 16:53:32 +0800</lastBuildDate><atom:link href="/tags/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>cmu 15445 b&#43;树实现</title>
      <link>/posts/cmu15-445/lab2-bplustree/</link>
      <pubDate>Thu, 01 Jun 2023 16:53:32 +0800</pubDate>
      
      <guid>/posts/cmu15-445/lab2-bplustree/</guid>
      <description>1. B+Tree Data Structure 1.1 GetValue() 点查询很简单，略
1.2 Insert() INDEX_TEMPLATE_ARGUMENTS auto BPLUSTREE_TYPE::Insert(const KeyType &amp;amp;key, const ValueType &amp;amp;value, Transaction *transaction) -&amp;gt; bool { if (IsEmpty()) { auto *leaf = reinterpret_cast&amp;lt;LeafPage *&amp;gt;(buffer_pool_manager_-&amp;gt;NewPage(&amp;amp;root_page_id_)-&amp;gt;GetData()); leaf-&amp;gt;Init(root_page_id_, INVALID_PAGE_ID, leaf_max_size_); leaf-&amp;gt;Insert(key, value, comparator_); UpdateRootPageId(root_page_id_); buffer_pool_manager_-&amp;gt;UnpinPage(root_page_id_, true); return true; } auto *l = reinterpret_cast&amp;lt;LeafPage*&amp;gt;(GetLeafPage(key)-&amp;gt;GetData()); if (!l-&amp;gt;Insert(key, value, comparator_)) { buffer_pool_manager_-&amp;gt;UnpinPage(l-&amp;gt;GetPageId(), false); return false; } SolveOverFlow(l); return true; } 如果树为空则从buffer_pool_manager_取出新页，进行init初始化、insert插入、更新root_id、unpin
若不为空，则查找key所在的区间leaf节点，进行插入操作，实际可以使用二分法在节点内搜寻，std::lower_bound有现成的工具函数，如果插入成功（原叶子节点不包含即将要插入的key），处理节点可能发生上溢。
INDEX_TEMPLATE_ARGUMENTS void BPLUSTREE_TYPE::SolveOverFlow(BPlusTreePage *old) { while (true) { // 如果该节点未发生上溢，则unpin后退出 if (!old-&amp;gt;IsOverFlow()) { buffer_pool_manager_-&amp;gt;UnpinPage(old-&amp;gt;GetPageId(), true) ; return ; } KeyType first_key; auto *newp = Split(old, first_key); if (old-&amp;gt;IsRootPage()) { auto *root = reinterpret_cast&amp;lt;InternalPage *&amp;gt;(buffer_pool_manager_-&amp;gt;NewPage(&amp;amp;root_page_id_)-&amp;gt;GetData()); root-&amp;gt;Init(root_page_id_, INVALID_PAGE_ID, internal_max_size_); root-&amp;gt;SetKeyAt(1, first_key); root-&amp;gt;SetValueAt(0, old-&amp;gt;GetPageId()); root-&amp;gt;SetValueAt(1, newp-&amp;gt;GetPageId()); root-&amp;gt;SetSize(2); old-&amp;gt;SetParentPageId(root_page_id_); newp-&amp;gt;SetParentPageId(root_page_id_); buffer_pool_manager_-&amp;gt;UnpinPage(old-&amp;gt;GetPageId(), true); buffer_pool_manager_-&amp;gt;UnpinPage(newp-&amp;gt;GetPageId(), true); buffer_pool_manager_-&amp;gt;UnpinPage(root_page_id_, true); UpdateRootPageId(root_page_id_); return ; } page_id_t parent_page_id = old-&amp;gt;GetParentPageId(); auto *parent = reinterpret_cast&amp;lt;InternalPage *&amp;gt;(buffer_pool_manager_-&amp;gt;FetchPage(parent_page_id)-&amp;gt;GetData()); parent-&amp;gt;InsertAfter(first_key, newp-&amp;gt;GetPageId(), old-&amp;gt;GetPageId()); newp-&amp;gt;SetParentPageId(parent_page_id); buffer_pool_manager_-&amp;gt;UnpinPage(old-&amp;gt;GetPageId(), true); buffer_pool_manager_-&amp;gt;UnpinPage(newp-&amp;gt;GetPageId(), true); old = parent; } } 首先将发生上溢的节点进行split操作，得到一个新的节点newp，newp节点为原上溢节点的右兄弟，还有first_key变量，是要插入到父节点的变量，为newp节点最左key值，因此**pair{first_key，newp-&amp;gt;page_id}**就是要插入到父节点的一堆pair</description>
    </item>
    
  </channel>
</rss>
